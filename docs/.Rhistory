print(cls_pred)
table(observed=data_cat_test$tox_cat, predicted=cls_pred)
library shiny
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
runExample("01_hello")
cls_reg_pred=predict(reg,TW20_tox_snps.out)
print cls_reg_pred
print(cls_reg_pred)
source('~/Dropbox/Bath_2013/Re__Virulence_random_forest/reduced_SNP_set/decision_trees-tdr-reduced_set.R')
source('~/Dropbox/Bath_2013/Re__Virulence_random_forest/reduced_SNP_set/decision_trees-tdr-reduced_set.R')
cls_pred=predict(cls_tuned,data_cat_test)
print(cls_pred)
source('~/Dropbox/Bath_2013/Re__Virulence_random_forest/reduced_SNP_set/decision_trees-tdr-reduced_set.R')
tree <- read.tree("/Users/timothyread/Dropbox/DATA/chlamydia-data/C_psittaci/psittaci_draft_analysis/Psittaci_1.6_SJJ_05_12/Species_Tree_1.6.nwk")
library(ape)
tree <- read.tree("/Users/timothyread/Dropbox/DATA/chlamydia-data/C_psittaci/psittaci_draft_analysis/Psittaci_1.6_SJJ_05_12/Species_Tree_1.6.nwk")
plot(tree)
tree$tip.label
labs <- c("CP11_","caviae")
?nodelabels
nodelabels(node = c(1,2,3), pch = 21, cex = 0.5, col = "red", bg = "blue")
?plot.phylo
plot(tree, show.tip.label=FALSE)
nodelabels(node = c(1,2,3,5), pch = 21, cex = 1.5, col = "red", bg = "blue")
plot(tree, show.tip.label=FALSE)
nodelabels(labs, pch = 23, cex = 1.5, col = "red", bg = "blue")
lst <- list()
lst$A <- c(1,2)
list$B <- c(3,4)
lst$B <- c(3,4)
lst$C <- c(5,6)
list[1]
list[1,]
lst[1,]
lst[,1]
str(lst)
e_labs <- rep("black", length(tree$edge[1,]))
Alab <- 3
e_labs[[Alab]] <- "red"
e_labs
e_labs <- rep("black", length(tree$edge[1,]))
e_labs
tree$edge
names(tree$edge)
tree$edge[1,]
tree$edge[,1]
e_labs <- rep("black", length(tree$edge[,1]))
e_labs
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
labs
temp <- edges_of_trees(tree,lab)
temp <- edges_of_trees(tree,labs)
temp
tree$tip.label
nl <- c(7,3)
nodelabels(node = nl, cex = 1, bg = "blue")
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
temp <- edges_of_trees(tree,labs)
nodelabels(node = nl, cex = 1, bg = "blue",pcs = 21)
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
temp <- edges_of_trees(tree,labs)
nodelabels(node = nl, cex = 1, bg = "blue",pch = 21)
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
temp <- edges_of_trees(tree,labs)
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
temp <- edges_of_trees(tree,labs)
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
temp <- edges_of_trees(tree,labs)
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
?print
print("case")
print(labs)
print(labs,"case")
source('~/Dropbox/RStudio-analysis/tims_phangorn_tree_functions.R')
install.packages(c("class", "lpSolve", "markdown", "mgcv", "mime", "seedy"))
bioc.lite("BioStrings")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
browseVignettes("Biostrings")
library("Biostrings", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
>Biostrings
?Biostrings
url <- "ftp://ftp.ncbi.nlm.nih.gov/genomes/Bacteria/Staphylococcus_aureus_N315_uid57837/NC_002745.fna"
N315 <- readDNAStringSet(url, format = "fasta")
N315[240000:240003]
str(N315)
N315
N315[1]
N315.dna <- N315[1]
N315.dna[240000:240203]
N315.dna[240000]
N315.dna
DNAString(N315,240000,240003)
DNAString(N315.dna,240000,240003)
?DNAString
N315
str(N315)
str(N315.dna)
rm(N315.dna)
DNAString(N315.dna)
readDNAString(N315[1])
str(N315[[1]])
dna <-str(N315[[1]])
dna <- N315[[1]]
dna[240000:240203]
translate(dna[240000:240203])
x = 2
dna_alph <- c("a","c","t","g")
dna_alph[[x]]
x = 4
dna_alph[[x]]
DNAString(c("a","g","c"))
DNAString(paste(c("a","g","c")))
paste(c("a","g","c"))
paste(("a","g","c")
paste("a","g","c")
paste("a","g","c", sep = "")
DNAString(paste("a","g","c", sep = ""))
get_aa_change <-function(ref_dna,pos,codon_pos,alt){
dna_alph <- c("a","c","t","g")
library("Biostrings", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
#need to warn if ref_dna not a DNAString
if (codon_pos == 1) {
cod <- ref_dna[pos:(pos+2)]
alt_cod <- DNAString(paste(dna_alph[[alt]],ref_dna[pos:(pos+2)], sep = ""))
}
else if (codon_pos == 2) {
cod <- ref_dna[(pos-1):(pos+1)]
alt_cod <- DNAString(paste(ref_dna[(pos-1),dna_alph[[alt]],ref_dna[(pos+1)], sep = ""))
}
else {
cod <- ref_dna[(pos-2):(pos)]
alt_cod <- DNAString(paste(ref_dna[(pos-2):(pos-1)],dna_alph[[alt]], sep = ""))
}
return(c(translate(cod),translate(alt_cod)))
}
get_aa_change <-function(ref_dna,pos,codon_pos,alt){
dna_alph <- c("a","c","t","g")
library("Biostrings", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
#need to warn if ref_dna not a DNAString
if (codon_pos == 1) {
cod <- ref_dna[pos:(pos+2)]
alt_cod <- DNAString(paste(dna_alph[[alt]],ref_dna[pos:(pos+2)], sep = ""))
}
else if (codon_pos == 2) {
cod <- ref_dna[(pos-1):(pos+1)]
alt_cod <- DNAString(paste(ref_dna[(pos-1)],dna_alph[[alt]],ref_dna[(pos+1)], sep = ""))
}
else {
cod <- ref_dna[(pos-2):(pos)]
alt_cod <- DNAString(paste(ref_dna[(pos-2):(pos-1)],dna_alph[[alt]], sep = ""))
}
return(c(translate(cod),translate(alt_cod)))
}
get_aa_change(dna,1000,1,3)
get_aa_change(dna,1000,1,4)
get_aa_change(dna,1000,1,1)
get_aa_change(dna,1000,1,2)
get_aa_change(dna,1000,1,3)
x <- get_aa_change(dna,1000,1,3)
x <- get_aa_change(dna,1000,2,3)
get_aa_change(dna,1000,2,1)
get_aa_change(dna,1000,2,2)
get_aa_change(dna,1000,2,3)
get_aa_change(dna,1000,2,4)
get_aa_change(dna,1000,3,4)
get_aa_change(dna,1000,3,1)
get_aa_change(dna,1000,3,2)
get_aa_change(dna,1000,3,3)
get_aa_change(dna,10000,3,3)
get_aa_change(dna,10000,3,4)
get_aa_change(dna,10000,3,5)
eval_synon <- function(aaPair){
if (aaPair[1] == aaPair{2}) {
return(TRUE)
}
else {
return(FALSE)
}
}
eval_synon <- function(aaPair){
if (aaPair[1] == aaPair[2]) {
return(TRUE)
}
else {
return(FALSE)
}
}
x <- get_aa_change(dna,1000,2,3)
eval_synon(x)
x <- get_aa_change(dna,1000,2,4)
eval_synon(x)
x <- get_aa_change(dna,1000,2,1)
eval_synon(x)
library(RColorBrewer)
scaleyellowred <- colorRampPalette(c("lightyellow", "red"), space = "rgb")(100)
spectab <- read.table("~/Dropbox/data(4).csv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, row.names = 1)
colnames(spectab) <- c("GYN6006", "GYN6006.1","GYN6005","GYN6005.1","GYN6004","GYN6004.1","GYN6003", "GYN6003.1", "GYN6002", "GYN6002.1",  "GYN6001", "GYN6001.1", "GYN5019", "GYN5019.1", "X4461792.3")
spectab1 <- spectab/colSums(spectab)
maxab <- apply(spectab1, 1, max)
n1 <- names(which(maxab < 0.01))
spectab2 <- spectab1[ -which(row.names(spectab1) %in% n1),]
```
```{r}
heatmap(as.matrix(spectab2), col = scaleyellowred, cexRow=0.4, margins = c(10, 2))
```
install.packages("xlsReadWrite")
write.table(spectab2, ""~/Dropbox/spectab2.txt, sep="\t")
write.table(spectab2, "~/Dropbox/spectab2.txt"", sep="\t")
write.table(spectab2, "~/Dropbox/spectab2.txt", sep="\t")
install.packages(c("codetools", "formatR", "labeling", "markdown", "MASS", "mgcv", "psychotools"))
read.csv("~/Google Drive/excel-fig0.1.csv")
read.csv("~/Google Drive/excel-fig0.1.csv")
?read.csv
read.csv("~/Google Drive/excel-fig0.1.csv", stringsAsFactors = FALSE)
strains <- read.csv("~/Google Drive/excel-fig0.1.csv", stringsAsFactors = FALSE)
str(strains)
strains$X <- as.date(strains$X)
strains$X <- as.datetime(strains$X)
?date
date(strains$X)
strains$X
?data.type
?datatype
?date
as.Date(strains$X)
as.Date(c("2010-01-01","2011-01-01","2012-01-01","2013-01-01","2014-01-01","2014-01-01"))
tps <- as.Date(c("2010-01-01","2011-01-01","2012-01-01","2013-01-01","2014-01-01","2014-01-01"))
str(tps)
View(strains)
plot(tps,strains$S.aureus)
plot(strains$S.aureus,tps)
strains$S.aureus
strains$S..aureus
plot(strains$S..aureus,tps)
plot(tps,strains$S..aureus)
tps <- as.Date(c("2010-01-01","2011-01-01","2012-01-01","2013-01-01","2014-01-01","2014-08-01"))
plot(tps,strains$S..aureus)
plot(tps,strains$S..aureus, xlab = "Genome projects", lty = "l", col = "blue")
plot(tps,strains$S..aureus, xlab = "Genome projects", lty = l, col = "blue")
plot(tps,strains$S..aureus, xlab = "Genome projects", ylab = "Date", col = "blue")
?lty
?plot
plot(tps,strains$S..aureus, xlab = "Genome projects", ylab = "Date", col = "blue", type = "l")
plot(tps,strains$S..aureus, ylab = "Genome projects", xlab = "Date", col = "blue", type = "l")
plot(tps,strains$S..aureus, ylab = "Genome projects", xlab = "Date", col = "blue", type = "l")
lines(tps,strains$E..coli, col = "red", type = "l")
lines(tps,strains$S..pneumoniae, col = "green", type = "l")
lines(tps,strains$S..pneumonaie, col = "green", type = "l")
?legend
legend("topleft",legend = c("S.aureus","E.coli","S.pneumo"),col = c("blue","red","green"), lty = 1)
plot(tps,strains$S..aureus, ylab = "Genome projects", xlab = "Date", col = "blue", type = "l")
lines(tps,strains$S..pneumonaie, col = "green", type = "l")
lines(tps,strains$E..coli, col = "red", type = "l")
?legend
plot(tps,strains$S..aureus, ylab = "Genome projects", xlab = "Date", col = "blue", type = "l", cex = 0.6)
lines(tps,strains$S..pneumonaie, col = "green", type = "l")
lines(tps,strains$E..coli, col = "red", type = "l")
legend("topleft",legend = c("S.aureus","E.coli","S.pneumo"),col = c("blue","red","green"), lty = 1, cex = 0.6)
legend("topleft",legend = c("S.aureus","E.coli","S.pneumo"),col = c("blue","red","green"), lty = 1, cex = 0.8)
legend("topleft",legend = c("S.aureus","E.coli","S.pneumo"),col = c("blue","red","green"), lty = 1, cex = 0.9)
legend("topleft",legend = c("S.aureus","E.coli","S.pneumo"),col = c("blue","red","green"), lty = 1, cex = 0.9, border = NULL)
?legend
legend("topleft",legend = c("S.aureus","E.coli","S.pneumo"),col = c("blue","red","green"), lty = 1, cex = 0.9, bty = "n")
strains <- read.csv("~/Google Drive/excel-fig0.1.csv", stringsAsFactors = FALSE)
N = 6000
maf = .03
es = .6
allele_counts = rbinom(n=N,prob=maf,size=2)
allele_counts
phenotypes = rnorm(n=N,m=0,sd=1) + es*allele_counts
phenotypes
?seq
?rep
pot <- c(rep(0,100),rep(1,900))
pot
pot <- c(rep(1,100),rep(0,900))
?sample
sample(pot,6)
sampling <- lapply(1:10000, function(x) sample(pot,6))
sampling
sampling <- lapply(1:10000, function(x) sum(sample(pot,6))
)
sampling
sampling <- sapply(1:10000, function(x) sum(sample(pot,6)))
ls
sampling
which(sampling > 4)
sampling > 4
which(sampling > 4)
which
?which
N = which(sampling > 4)
N
N = sampling > 4
N
str(N)
which(N)
which(sampling > 3)
length(which(sampling > 3))
pot <- c(rep(1,500),rep(0,500))
sampling <- sapply(1:10000, function(x) sum(sample(pot,6)))
length(which(sampling > 3))
length(which(sampling > 4))
length(which(sampling > 5))
length(which(sampling > 6))
x = seq(from = 0, to = 10, length = 20)
x
y= exp(-x)
y
plot(x,y)
lines(x,y)
y=exp(x)
plot(x,y)
y
lines(x,y)
y= exp(-x)
lines(x,y)
target = function(x){    if(x<0){        return(0)}    else {        return( exp(-x))    }}
target = function(x){    if(x<0){        return(0)}    else {        return( exp(-x))    }}
target = function(x){  if(x<0){    return(0)}  else {    return( exp(-x))  }}
target <- function(x){  if(x<0){    return(0)}  else {    return( exp(-x))  }}
target <- function(x){  }
target <- function(x){  }
?function
}
target <- function(x){  }
target <- function(x){if(x<0){return(0)}else {return(exp(-x))} }
target(-1)
target(1)
x = rep(0,1000)
x[1] = 3
for(i in 2:1000){  currentx = x[i-1]  proposedx = currentx + rnorm(1,mean=0,sd=1)  A = target(proposedx)/target(currentx)  if(runif(1)<A){    x[i] = proposedx  } else {    x[i] = currentx  }}
for(i in 2:1000){
currentx = x[i-1]
proposedx = currentx + rnorm(1,mean=0,sd=1)
A = target(proposedx)/target(currentx)
if(runif(1)<A){
x[i] = proposedx
} else {
x[i] = currentx
}
}
plot(x)
hist(x)
x
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
prior(0.5)
likelihood(0.5,50,21,29)
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
source('~/R_wd/learning_MCMC_functions.R')
z=psampler(50,21,29,10000,0.5,0.01)
plot(z)
runif(1)
z=psampler(50,21,29,10000,0.2,0.01)
debug(psampler(50,21,29,10000,0.2,0.01))
source('~/R_wd/learning_MCMC_functions.R')
z=psampler(50,21,29,10000,0.2,0.01)
z=psampler(50,21,29,10000,0.5,0.01)
debugSource('~/R_wd/learning_MCMC_functions.R')
z=psampler(50,21,29,10000,0.5,0.01)
psampler(50,21,29,10000,0.5,0.01)
debugSource('~/R_wd/learning_MCMC_functions.R')
z=psampler(50,21,29,10000,0.5,0.01)
plot(z)
hist(z)
z=psampler(50,21,29,10000,0.2,0.01)
plot(z)
hist(z)
likelihood(0.5,50,21,29)
likelihood(0.6,50,21,29)
likelihood(0.65,50,21,29)
x=seq(0,1,length=1000)
z=psampler(50,21,29,10000,0.5,0.01)
hist(z,prob=T)
lines(x,dbeta(x,122, 80))
?D
source('~/harmonogram.R', echo=TRUE)
harmonogram
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
source('~/harmonogram.R')
install.packages(c("boot", "digest", "foreign", "httr", "jsonlite", "manipulate", "MASS", "mgcv", "nlme", "packrat", "RColorBrewer", "RCurl", "reshape2", "rmarkdown", "rstudioapi", "seqinr"))
install.packages("~/Downloads/seedy_1.1.tar.gz")
source("~/Downloads/seedy/R/flat.r")
source("~/Downloads/seedy/R/meansnps.R")
source("~/Downloads/seedy/R/simulatepopulation.R")
X <- simulatepopulation( m.rate=0.0005, runtime=10000, equi.pop=2000,
sample.times=(1:5)*2000, genomelength=10000,
bottle.times=5000, bottle.size=1, full=TRUE)
source("~/Downloads/seedy/R/plotdiversity.R")
plotdiversity(X)
source("~/Downloads/seedy/R/diversity.range.R")
diversity.range(X)
diversity.range(X, sample.times = (1:10)*1000)
plot.diversity(X, sample.times = (1:10)*1000)
plotdiversity(X, sample.times = (1:10)*1000)
X
str(X)
X
str(X)
data("~/Downloads/seedy/data/deepseq.rda")
load("~/Downloads/seedy/data/deepseq.rda")
deepseq
str(deepseq)
plotdiversity(deepseq, sample.times = (1:10)*1000))
plotdiversity(deepseq, sample.times = (1:10)*1000)
plotdiversity(X, sample.times = (1:10)*1000)
X <- simulatepopulation( m.rate=0.0005, runtime=10000, equi.pop=2000,
sample.times=(1:5)*2000, genomelength=10000,
bottle.times=5000, bottle.size=1, full=TRUE)
plotdiversity(X, sample.times = (1:9)*1000)
X$obs.strain[[1]]
X$obs.strain[[2]]
45+78
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RISmed")
library("RISmed", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
sessionInfo()
library("RISmed")
library("dplyr")
res <- EUtilsSummary('read td', type='esearch', db='pubmed', mindate='2013', maxdate='2015')
fetch <- EUtilsGet(res)
fetch
Author(fetch)
set.seed(765765)
n1 <- rnorm(25)
n1
n2 <- rnorm(25)
n1 == n2
set.seed(76)
n3 <- rnorm(25)
n1 == n3
set.seed(765765)
n4 <- rnorm(25)
n1 == n4
plot(n1)
plot(n2)
setwd("~/Documents")
setwd("~/Documents/IBS574-git")
setwd("~/Documents/IBS574-git/docs/docs")
sample(c("A","T","G","C"), 20, replace=T)
sample(c("A","T","G","C","T","T","A","A"), 20, replace=T)
paste(sample(c("A","T","G","C"), 20, replace=T), collapse=""))
paste(sample(c("A","T","G","C"), 20, replace=T), collapse="")
sapply(1:2, function(x) paste(sample(c("A","T","G","C"), 20, replace=T), collapse=""))
sapply(1:4, function(x) paste(sample(c("A","T","G","C"), 20, replace=T), collapse=""))
sw_test <- pairwiseAlignment(dset[1],dset[2], substitutionMatrix = sigma, gapOpening = -2, gapExtension = -8, scoreOnly = FALSE, type="local")
sw_test #print out the result
dset <- DNAStringSet(sapply(1:2, function(x) paste(sample(c("A","T","G","C"), 20, replace=T), collapse=""))) # Creates random sample sequences
library("Biostrings")
dset <- DNAStringSet(sapply(1:2, function(x) paste(sample(c("A","T","G","C"), 20, replace=T), collapse=""))) # Creates random sample sequences
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
sw_test <- pairwiseAlignment(dset[1],dset[2], substitutionMatrix = sigma, gapOpening = -2, gapExtension = -8, scoreOnly = FALSE, type="local")
sw_test #print out the result
sigma <- nucleotideSubstitutionMatrix(match = 2, mismatch = -3, baseOnly = TRUE)
sw_test <- pairwiseAlignment(dset[1],dset[2], substitutionMatrix = sigma, gapOpening = -2, gapExtension = -8, scoreOnly = FALSE, type="local")
sw_test #print out the result
?quantile
randScores <- vector()  #initialize results vector as empty
for (i in 1:1000){
#create two random sequences
rset <- DNAStringSet(sapply(1:2, function(x) paste(sample(c("A","T","G","C"), 20, replace=T), collapse="")))
# run an alignment and collect the score
rscore <- pairwiseAlignment(rset[1],rset[2], substitutionMatrix = sigma, gapOpening = -2, gapExtension = -8, scoreOnly = TRUE, type="local")
#append to results vector
randScores <- append(randScores, rscore)
}
quantile(randScores,0.95)
quantile(randScores,0.99)
